child.ts:
import { Component, EventEmitter, Input, Output } from '@angular/core';

@Component({
  standalone: false,
  selector: 'app-child',
  templateUrl: './child.html',
  styleUrls: ['./child.css'],
})
export class Child {
  @Input() username: string = "";
  id: number = 5;
  @Output() idevent: EventEmitter<number> = new EventEmitter<number>();

  setid() {
    this.idevent.emit(this.id);
  }
}

date-user.ts:
import { Component, Input, OnInit } from '@angular/core';
import { Iuser } from '../models/userModel';

@Component({
  standalone: false,
  selector: 'app-date-user',
  templateUrl: './date-user.html',
  styleUrls: ['./date-user.css']
})
export class DateUser implements OnInit {
  users: Iuser[] = [
    {
      id: 1,
      name: "Nourin Awad",
      imgurl: "https://i.pinimg.com/736x/35/a2/2f/35a22f8e5d4ee555d7873b884ed5b909.jpg",
      password: "666"
    },
    {
      id: 2,
      name: "Tamim Awad",
      imgurl: "https://i.pinimg.com/736x/3d/44/64/3d4464c95d24bed1bc08ec2dd53f8068.jpg",
      password: "124"
    }
  ];

  @Input() userid!: number;
  @Input() date_create!: Date;
  user!: Iuser;

  ngOnInit(): void {
    this.user = this.users.find(u => u.id === this.userid)!;
  }
}

postModel.ts:
export interface Ipost {
  title: string;
  body: string;
  id: number;
  userid: number;
  date: Date;
}

userModel:
export interface Iuser{
  id: number,
  name: string,
  imgurl: string,
  password: string,
}

nav-bar.ts:
import { Component } from '@angular/core';

@Component({
  selector: 'app-nav-bar',
  standalone: false,
  templateUrl: './nav-bar.html',
  styleUrl: './nav-bar.css'
})
export class NavBar {}


posts.ts:
import { Component, OnInit } from '@angular/core';
import { PostService } from '../services/post.service';
import { Ipost } from '../models/postModel';

@Component({
  standalone: false,
  selector: 'app-posts',
  templateUrl: './posts.html',
  styleUrls: ['./posts.css']
})
export class Posts implements OnInit {
  posts: Ipost[] = [];

  constructor(private postService: PostService) {}

  ngOnInit(): void {
    this.posts = this.postService.getPosts();
  }

  removePost(id: number) {
    this.postService.deletePost(id);
    this.posts = this.postService.getPosts();
  }
}

post.service.ts:
import { Injectable } from '@angular/core';
import { Ipost } from '../models/postModel';

@Injectable({
  providedIn: 'root'
})
export class PostService {
  private posts: Ipost[] = [
    {
      id: 1,
      userid: 1,
      title: 'Hi! This is a post',
      body: 'and this is a body!',
      date: new Date()
    },
    {
      id: 2,
      userid: 2,
      title: 'Man I love this website',
      body: 'this is so fun',
      date: new Date()
    }
  ];

  getPosts(): Ipost[] {
    return this.posts;
  }

  addPost(post: Ipost): void {
    this.posts.push(post);
  }

  deletePost(id: number): void {
    this.posts = this.posts.filter(p => p.id !== id);
  }

  updatePost(updatedPost: Ipost): void {
    const index = this.posts.findIndex(p => p.id === updatedPost.id);
    if (index > -1) {
      this.posts[index] = { ...updatedPost };
    }
  }
}

app-module.ts:
import { NgModule, provideBrowserGlobalErrorListeners, provideZonelessChangeDetection } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppRoutingModule } from './app-routing-module';
import { App } from './app';
import { FormsModule } from '@angular/forms';
import { NavBar } from './nav-bar/nav-bar';
import { Posts } from './posts/posts';
import { Child } from './child/child';
import { DateUser } from './date-user/date-user';

@NgModule({
  declarations: [
    App,
    NavBar,
    Posts,
    Child,
    DateUser,
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule


],
  providers: [
    provideBrowserGlobalErrorListeners(),
    provideZonelessChangeDetection()
  ],
  bootstrap: [App]
})
export class AppModule { }

app-routing-module.ts:
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

const routes: Routes = [];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule {}

